// 静态分析模板变量  
var KEYWORDS =  
// 关键字  
'break,case,catch,continue,debugger,default,delete,do,else,false'  
+ ',finally,for,function,if,in,instanceof,new,null,return,switch,this'  
+ ',throw,true,try,typeof,var,void,while,with'  

// 保留字  
+ ',abstract,boolean,byte,char,class,const,double,enum,export,extends'  
+ ',final,float,goto,implements,import,int,interface,long,native'  
+ ',package,private,protected,public,short,static,super,synchronized'  
+ ',throws,transient,volatile'  

// ECMA 5 - use strict  
+ ',arguments,let,yield'  

+ ',undefined';  

// 滤除多行注释、单行注释、单双引号包裹字符串、点号+空格后的字符串  
var REMOVE_RE = /\/\*[\w\W]*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|"(?:[^"\\]|\\[\w\W])*"|'(?:[^'\\]|\\[\w\W])*'|\s*\.\s*[$\w\.]+/g;  
// 滤除变量，如{{if admin}}中的admin  
var SPLIT_RE = /[^\w$]+/g;  
// 滤除js关键字  
var KEYWORDS_RE = new RegExp(["\\b" + KEYWORDS.replace(/,/g, '\\b|\\b') + "\\b"].join('|'), 'g');  
// 滤除数字  
var NUMBER_RE = /^\d[^,]*|,\d[^,]*/g;  
// 滤除起始、结尾的多个逗号  
var BOUNDARY_RE = /^,+|,+$/g;  
// 以$或,分割  
var SPLIT2_RE = /^$|,+/;  

// 获取变量  
function getVariable (code) {  
    return code  
    .replace(REMOVE_RE, '')  
    .replace(SPLIT_RE, ',')  
    .replace(KEYWORDS_RE, '')  
    .replace(NUMBER_RE, '')  
    .replace(BOUNDARY_RE, '')  
    .split(SPLIT2_RE);  
};  

// 字符串转义  
function stringify (code) {  
    return "'" + code  
    // 单引号与反斜杠转义  
    .replace(/('|\\)/g, '\\$1')  
    // 换行符转义(windows + linux)  
    .replace(/\r/g, '\\r')  
    .replace(/\n/g, '\\n') + "'";  
} 