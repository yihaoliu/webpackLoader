
var escapeMap = {
	"<": "&#60;",  
    ">": "&#62;",  
    '"': "&#34;",  
    "'": "&#39;",  
    "&": "&#38;" 
};
var utils = {
	/**
	 * 判断类型
	 * @传入的变量  {[type]} obj [description]
	 * @return 返回数据类型 [object Array]、[object Number]、[object String]、[object Undefined]、[object Boolean]、[object Object]、[object Function]
	 */
	typeJudge:function(obj){
		return Object.prototype.toString.call(obj);
	},
	/**
	 * 转字符串
	 * @value  传入的参数
	 * @type   传入的类型
	 * @return 转换后为字符串类型
	 */
	toString : function(value,type){
		if(typeof value != 'string'){
			type = typeof value;
			if(type === 'number'){
				value += '';
			}else if(type === 'function'){
				value = this.toString(value.call(value));
			}else{
				value = '';
			}
		}
		return value;
	},
	/**
	 * [isArray description]
	 * @param  {[type]}  obj [description]
	 * @return {Boolean}     [description]
	 */
	isArray : function (obj) {
		return this.typeJudge(obj) === "[object Array]";
	},
	/**
	 * 获取特殊字符对应的符号
	 * @param  {[type]} s [description]
	 * @return {[type]}   [description]
	 */
	escapeFn : function(s){
		return this.escapeMap[s];
	},
	/**
	 * 将HTML特殊字符替换
	 * @param  {[type]} content [description]
	 * @return {[type]}         [description]
	 */
	escapeHtml : function(content){
		return this.toString(content).resplace(/&(?![\w#]+;)|[<>"']/g,this.escapeFn); 
	},
	each : function(data, callback){
		var i,len;
		if(this.isArray(data)){
			for (i = 0,len = data.length; i < len; i++) {
				callback.call(data,data[i],i,data);
			}
		} else {
			for( i in data){
				callback.call(data,data[i],i);
			}


		}
	}
}
module.exports = utils;





